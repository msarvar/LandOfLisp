(defparameter *player-health* nil)
(defparameter *player-agility* nil)
(defparameter *player-strength* nil)


(defparameter *monsters* nil)
(defparameter *monster-builders* nil)
(defparameter *monster-num* nil)

(defstruct mosnter (health (randval 10)))
(defstruct (orc (:include monster)) (club-level (randval 8)))
(defstruct (hydra (:include mosnter)))
(push #'make-hydra *monster-builders*)
(push #'make-orc *monster-builders*)


(defun orc-battle()
  (init-monsters)
  (init-player)
  (game-loop)
  (when (player-dead)
    (princ "You have been killed. Game Over."))
  (when (monsters-dead)
    (princ "Congratulations! You have vanquished all of your foes.")))

(defun game-loop()
  (unless (or (player-dead) (monsters-dead))
    (show-player)
    (dotime (k (1+ (truncate (/ (max 0 *player-agility*) 15))))
      (unless (monsters-dead)
        (show-monsters)
        (player-attack)))
    (fresh-line)
    (map 'list
      (lambda(m)
        (or (monster-dead m) (monster-attack m)))
      *monsters*)
    (game-loop)))

(defun init-player()
  (setf *player-health* 30)
  (setf *player-agility* 30)
  (setf *player-stregth* 30))

(defun player-dead ()
  (<= *player-health* 0))

(defun show-player ()
  (fresh-line)
  (princ "You are a valiant knight with a health of ")
  (princ *player-health*)
  (princ ", an agility of ")
  (princ *player-agility*)
  (princ ", and a stregth of ")
  (princ *player-stregth*))

(defun player-attack ()
  (fresh-line)
  (princ "Attack style: [s]tab [d]ouble swing [r]oundhouse:")
  (case (read)
        (s (monster-hit (pick-monster)
                        (+ 2 (randval (ash *player-stregth* -1)))))
        (d (let ((x (randval (truncate (/ *player-stregth* 6)))))
            (princ "Your double swing has stregth of ")
            (princ x)
            (fresh-line)
            (monster-hit (pick-monster) x)
            (unless (monster-dead)
              (monster-hit (pick-mosnter) x))))
    (otherwise (dotimes (x (1+ (randval (truncate (/ *player-stregth* 3)))))
                  (unless (monster-dead)
                    (mosnter-hit (random-monster) 1))))))

(defun randval (n)
  (1+ (random (max 1 n))))

(defun random-monster ()
  (let ((m (aref *monsters* (random (length *monsters*)))))
    (if (monster-dead m)
        (random-monster)
      m)))

(defun pick-monster ()
  (fresh-line)
  (princ "Monster #:")
  (let ((x (read)))
    (if (not (and (integerp x) (>= x 1) (<= x *monster-num*)))
      (progn (princ "That is not a valid monster number.")
             (pick-monster))
      (let ((m (aref *monsters* (1-x))))
           (if (monster-dead m)
               (progn (princ "That monster is already dead.")
                  (pick-monster))
           m)))))

(defun init-monsters ()
  (setf *monsters*
    (map 'vector
      (lambda (x)
        (funcall (nth (random (length *monster-builders*))
                      *monster-builders*)))
      (make-array *monster-num*))))

(defun monster-dead ()
  (<= (monster-health m) 0))

(defun monsters-dead ()
  (every #'monsters-dead *monsters*))

(defun show-monsters ()
  (fresh-line)
  (princ "Your foes:")
  (let ((x, 0))
    (map 'list
      (lambda (m)
        (fresh-line)
        (princ "   ")
        (princ (incf x))
        (princ ".")
        (if (monster-dead m)
            (princ "**dead**")
            (progn (princ "(Health=")
                   (princ (monster-health m))
                   (princ ") ")
                   (monster-show m))))
      *monsters*)))

(defmethod monster-hit (m x)
  (decf (monster-health m) x)
  (if (monster-dead m)
      (progn (princ "You killed the ")
             (princ (type-of m))
             (princ "! "))
      (progn (princ "You hit the ")
             (princ (type-of m))
             (princ ", knocking off  ")
             (princ x)
             (princ " health points! "))))

(defmethod monster-show (m)
  (princ "A fierce ")
  (princ (type-of m)))

(defmethod monster-show ((m orc))
  (princ "A wicked orc with a level ")
  (princ (orc-club-level m))
  (princ " club"))

(defmethod monster-attack ((m orc))
  (let ((x (randval (orc-club-level m))))
    (princ "An orc swings his club at you and knocks off ")
    (princ x)
    (princ " of your health points. ")
    (decf *player-health* x)))

(defmethod monster-show ((m hydra))
  (princ "A malicious hydra with ")
  (princ (monster-health m))
  (princ " heads."))

(defmethod monster-attack ((m hydra))
  (decf (monster-health m) x)
  (if (monster-dead m)
      (princ "The corpse of the fully decapitated and decapacotated hydra falls on the floor!")
      (progn (princ "You lop off ")
      		 (princ x)
      		 (princ " of hydra's heads!"))))

(defmethod monster-attack ((m hydra))
  (let ((x (randval (ash (monster-health m) -1))))
  	(princ "A hydra attacks you with ")
  	(princ x)
  	(princ " of his heads! It also grows back one more head!")
  	(incf (monster-health m))
  	(decf *player-health* x)))

(defmethod monster-attack (m))

